CSE 506: OPERATING SYSTEM - Prof Erez Zadok
HOMEWORK ASSIGNMENT 1
Submitted By: Faheem Ali
SBU ID: 114362913

PURPOSE:
The purpose of this assignment was to get the Linux kernel development environment working; to make small changes to the kernel, support a dynamic system call, and test your changes out; to learn about system calls.

Hence as part of the assignment I have created a new system call
	sys_cryptocopy(void * args)
which takes in the following struct from userland.
struct user_args {
	char *infile;
	char *outfile;
	void *keybuf;
	unsigned int keylen;
	unsigned char flag;
};

The syscall performs the following tasks based on the flags provided:
>If "flags & 0x1" is non-zero, then you should encrypt the infile onto the outfile.
>If "flags & 0x2" is non-zero, then you should decrypt the infile onto the outfile.
>If "flags & 0x4" is non-zero, then you should just copy the infile to the outfile.

FILES INCLUDED :

-------------------------------------------------------------------------------------------------------------------------------------------

1. /usr/src/hw1-faheali/CSE-506
    ---- Makefile
	---- install_module.sh
	---- sys_cryptocopy.c      : system call file
	---- xhw1.c          	   : user land program to call the syscall
	---- 
	---- scripts
		----- test_master.sh - Runs all the test scripts
		----- test01.sh - Test Script to test the syscall.
		----- test02.sh - Test Script to test the syscall.
		----- result - Logs the result
		----- log - Logs for each run of the test with output
	---- kernel.config - Included in the CSE-506 folder 
				 
-------------------------------------------------------------------------------------------------------------------------------------------
USER PROGRAM "xhw1.c" : Created a userland program which provided APIs wrapped on top of the syscall and can be used by programs to access the syscall. The main functionality of the userland code is to validate the inputs and hash the password into a fixed size key and then finally invoking the syscall.

1. Getting the INPUT : getopt() - used this function to parse the command line arguments

2. The password given to the userland when we encrypt or decrypt has to be atleast 6 characters long. The userland then
   used MD5 hashing to hash the password into 128bit long cipher and we pass this to the syscall. Although sha256 is more secure but bcz we again hash the key in syscall and since the arguments are passed internally, MD5 seemed like a good enough algorithm hence the choice. 

3. Input valudation: The useland program does a robust check on the inputs that are being provided and proactively returns 	  an error instead of continuing to the system call in case the inputs aren't valid
   Some of the examples of the checks we performa include but are not limited to
	1.1 When we don't pass any arguments specified
	1.2 If we specify -p with -c
	1.3 empty names of  => password, input file name and output file name
	1.4 Multiple options are specified together => -c, -d, -e. I am using bitwise operation to set only 1 bit and using
			bitwise operation to check how many bits are set using => flag & (flag-1). If it value is 0 then only
			bit is set else error out.
	1.5 No option (-e or -d) specified with -p.
	1.6 Password length is less than 6 characters
	1.7 Password contains newline then remove newline from password
	1.8 Unknon options specified
	1.9 Missing argument for -p <password>

4. The userland finally calls the sycall and get the return value from the syscall. It then uses the errno to decipher the 	  proper in case the retured value from the syscall is negative. We use strerror(errno) to properly get the definition of 
   the error and give the user proper context about the failure.

-------------------------------------------------------------------------------------------------------------------------------------------
KERNEL MODULE "sys_cryptocopy.c": The syscall implements all the mentioned functionalites at the Kernel level. It job is to undertake the task provided by the user and return appropriate errors if any arise during the execution to the userland in the errno variable.

	This is the kernel land code.

1. Arguments checking and other checks : 
	1.1 It does all the arguments checking that is done in User program xcpenc.c mentioned above and return accordingly
		 error values.
	1.2 It checks if key passed during encryption and decryption matches or not and then error out if not

2. Hashing : We use the more secure SHA256 hashing in the syscall. The sycall hashed the password which was already hashed 	  by the user land code before storing it into the preamble.

3. Checking the files :
	1.1 To check if the input and output files have the necessary permissions.
	1.2 Error out if both i/p and o/p point to same file (Hardlink + symboliclink) (using inode number and super block)
	1.3 Delete partially written file using lock and vfs_unlink.
	1.4 If input, output files are not regular file then error out.

4. File permission: We set the permissions of the output file to be equal to the permission of the input file given by the 	  user.

3. Encryption/Decryption :
	1.1 IV DATA : We use the hardcoded value of the IVData fro the schiper
	1.2 PREAMBLE : We store the value of the preamble in the ouput file.

4. Read/Write : At a time we read PAGE_SIZE amount of bytes from the file or if less then the number of bytes only.

5. Implemented strcmp function and strlen in kernel module
 
-------------------------------------------------------------------------------------------------------------------------------------------

TEST SCRIPTS : The scripts/ folder contains multiple scripts to test all the above mentioned functionalities and the output is logged in the log file while the results being logged in the results file.

The files are numbered from test01.sh onwards.
-------------------------------------------------------------------------------------------------------------------------------------------

REFRENCES : 

Skcipher code : https://www.kernel.org/doc/html/v4.18/crypto/api-samples.html
https://elixir.bootlin.com/linux/v5.4.30/source/fs/ecryptfs/inode.c#L144
https://code.woboq.org/linux/linux/crypto/md5.c.html
https://www.cyberciti.biz/faq/linux-md5-hash-string-based-on-any-input-string/
https://kernel.readthedocs.io/en/sphinx-samples/crypto-API.html
https://mchehab.fedorapeople.org/kernel_docs/crypto/api-samples.html